# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CVdfBat4_ubVo03ny-qG6n3kHbYi9Zv1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from google.colab import files


uploaded = files.upload()
df = pd.read_csv(next(iter(uploaded)))

print(df.head())

# Check for missing values
print("Missing values in each column:")
print(df.isna().sum())

# Handle missing values: Impute missing 'Age' and 'Fare' with mean
df['Age'].fillna(df['Age'].mean(), inplace=True)
df['Fare'].fillna(df['Fare'].mean(), inplace=True)

# Remove rows with missing values (optional, if needed)
df.dropna(inplace=True)

# Verify missing values
print("\nMissing values after cleaning:")
print(df.isna().sum())

# Remove duplicate rows
print("\nNumber of duplicate rows:", df.duplicated().sum())
df.drop_duplicates(inplace=True)

# Outlier detection using Z-score for 'Age'
z_scores = np.abs(stats.zscore(df['Age']))
outliers_z = df[z_scores > 3]
print("\nOutliers in 'Age' based on Z-score:")
print(outliers_z)

# Remove row with PassengerId 988 (assuming you want to remove a specific row)
df = df[df['PassengerId'] != 988]

# **Visualizations:**

# 1. **Boxplot for 'Age' to detect outliers visually**
plt.figure(figsize=(8,6))
sns.boxplot(y=df['Age'])
plt.title('Box Plot of Age to Identify Outliers')
plt.ylabel('Age')
plt.show()

# 2. **Categorical Variables - Bar Plots**

# Pclass distribution
plt.figure(figsize=(8,6))
sns.countplot(x='Pclass', data=df)
plt.title('Count of Passengers by Pclass')
plt.xlabel('Pclass')
plt.ylabel('Count')
plt.show()

# Sex distribution
plt.figure(figsize=(8,6))
sns.countplot(x='Sex', data=df)
plt.title('Count of Passengers by Sex')
plt.xlabel('Sex')
plt.ylabel('Count')
plt.show()

# Embarked distribution
plt.figure(figsize=(8,6))
sns.countplot(x='Embarked', data=df)
plt.title('Count of Passengers by Embarked')
plt.xlabel('Embarked')
plt.ylabel('Count')
plt.show()

# 3. **Numeric Variables - Histograms**

# Age distribution
plt.figure(figsize=(8,6))
sns.histplot(df['Age'], kde=True)
plt.title('Histogram of Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# Fare distribution
plt.figure(figsize=(8,6))
sns.histplot(df['Fare'], kde=True)
plt.title('Histogram of Fare')
plt.xlabel('Fare')
plt.ylabel('Frequency')
plt.show()

# SibSp distribution
plt.figure(figsize=(8,6))
sns.histplot(df['SibSp'], kde=True)
plt.title('Histogram of SibSp')
plt.xlabel('SibSp')
plt.ylabel('Frequency')
plt.show()

# Parch distribution
plt.figure(figsize=(8,6))
sns.histplot(df['Parch'], kde=True)
plt.title('Histogram of Parch')
plt.xlabel('Parch')
plt.ylabel('Frequency')
plt.show()

# 4. **Correlation Heatmap for Numeric Features**
# Select numeric columns
numeric_data = df[['Age', 'Fare', 'SibSp', 'Parch']]

# Calculate correlation matrix
cor_matrix = numeric_data.corr()

# Plot correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(cor_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Heatmap for Numeric Features')
plt.show()

# **Convert categorical variables to category type for optimization**
df['Pclass'] = df['Pclass'].astype('category')
df['Sex'] = df['Sex'].astype('category')
df['Embarked'] = df['Embarked'].astype('category')
df['Cabin'] = df['Cabin'].astype('category')
df['Ticket'] = df['Ticket'].astype('category')

# Summarize the cleaned data
print("\nSummary of the cleaned dataset:")
print(df.describe())

# Final check: List of all unique values for categorical variables
print("\nUnique values for categorical columns:")
print(df[['Pclass', 'Sex', 'Embarked', 'Cabin', 'Ticket']].nunique())